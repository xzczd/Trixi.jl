var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Trixi is an open-source project and we are very happy to accept contributions from the community. Please feel free to open issues or submit patches (preferably as merge requests) any time. For planned larger contributions, it is often beneficial to get in contact with one of the principal developers first (see Authors).","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Trixi and its contributions are licensed under the MIT license (see License). As a contributor, you certify that all your contributions are in conformance with the Developer Certificate of Origin (Version 1.1), which is reproduced below.","category":"page"},{"location":"contributing/#Developer-Certificate-of-Origin-(Version-1.1)","page":"Contributing","title":"Developer Certificate of Origin (Version 1.1)","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The following text was taken from https://developercertificate.org:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"development/#Development","page":"Development","title":"Development","text":"","category":"section"},{"location":"development/#Interactive-use-of-Julia","page":"Development","title":"Interactive use of Julia","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"When a Julia program is executed, Julia first loads and parses all code. Then, the just-in-time compiler has to compile all functions at their first use, which incurs an overhead each time a program is run. For proper packages and commands executed in the REPL (= \"return-eval-print loop\", which is what the Julia community calls the interactive command-line prompt that opens when executing julia without any files as arguments), however, the previously compiled functions are cached. Therefore, Trixi should generally always be used interactively from the REPL without closing Julia during development, as it allows much faster turnaround times.","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"If you naively run Trixi from the REPL, you will not be able to change your Trixi source files and then run the changed code without restarting the REPL, which destroys any potential benefits from caching. However, restarting Julia can be avoided by using the Revise.jl package, which tracks changed files and re-loads them automatically. Therefore, it is highly recommended to first install Revise with the following command in Julia: To enter the packe REPL mode, press ] in the standard Julia REPL mode. Then, execute","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"(@v1.5) pkg> add Revise","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Now you are able to run Trixi from the REPL, change Trixi code between runs, and enjoy the advantages of the compilation cache! Before you start using Revise regularly, please be aware of some of the Pitfalls when using Revise.","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Another recommended package for working from the REPL is OhMyREPL.jl. It can be installed by running","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"(@v1.5) pkg> add OhMyREPL","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"and adds syntax highlighting, bracket highlighting, and other helpful improvements for using Julia interactively. To automatically use OhMyREPL when starting the REPL, follow the instructions given in the official documentation.","category":"page"},{"location":"development/#Running-Trixi-interactively-in-the-global-environment","page":"Development","title":"Running Trixi interactively in the global environment","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"If you've installed Trixi and Revise in your default environment, begin by executing:","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"This will start the Julia REPL. Then, run","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia> using Revise; using Trixi","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"You can run a simulation by executing","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia> Trixi.run(\"examples/2d/parameters.toml\")","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Together, all of these commands can take some time, roughly half a minute on a modern workstation. Most of the time is spent on compilation of Julia code etc. If you execute the last command again in the same REPL, it will finish within a few milliseconds (maybe ~45 on a modern workstation).  This demonstrates the second reason for using the REPL: the compilation cache.  That is, those parts of the code that do not change between two Trixi runs do not need to be recompiled and thus execute much faster after the first run.","category":"page"},{"location":"development/#Manually-starting-Trixi-in-the-local-environment","page":"Development","title":"Manually starting Trixi in the local environment","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"If you followed the installation instructions for developers, execute Julia with the project directory set to the package directory of the program/tool you want to use. For example, to run Trixi this way, you need to start the REPL with","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia --project=path/to/Trixi.jl/","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"and execute","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia> using Revise; using Trixi","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"to load Revise and Trixi. You can then proceed with the usual commands and run Trixi as in the example above. The --project flag is required such that Julia can properly load Trixi and all dependencies if Trixi is not installed in the global environment. The same procedure also applies should you opt to install the postprocessing tools Trixi2Vtk and Trixi2Img manually such that you can modify their implemenations.","category":"page"},{"location":"development/#Pitfalls-when-using-Revise","page":"Development","title":"Pitfalls when using Revise","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"While Revise is a great help for developing Julia code, there are a few situations to watch out for when using Revise. The following list of potential issues is based on personal experiences of the Trixi developers and probably incomplete.  Further information on limitations and possible issues with Revise can be found in the official documentation.","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"tip: If in doubt, restart the REPL\nOftentimes, it is possible to recover from issues with Revise by fixing the offending code. Sometimes, however, this is not possible or you might have troubles finding out what exactly caused the problems. Therefore, in these cases, or if in doubt, restart the REPL to get a fresh start.","category":"page"},{"location":"development/#Syntax-errors-are-easy-to-miss","page":"Development","title":"Syntax errors are easy to miss","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Revise does not stop on syntax errors, e.g., when you accidentally write a[i) instead of a[i].  In this case, Revise reports an error but continues to use the old version of your files! This is especially dangerous for syntax errors, as they are detected while Revise reloads changed code, which happens in the beginning of a new execution. Thus, the syntax error message quickly disappears from the terminal once Trixi starts writing output to the screen and you might not even have noticed that an error occurred at all.","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Therefore, when you are deep in a coding/debugging session and wonder why your code modifications do not seem to have any effect, scroll up in your terminal to check if you missed earlier syntax errors, or - if in doubt - restart your REPL.","category":"page"},{"location":"development/#Files-are-not-tracked-after-changing-branches","page":"Development","title":"Files are not tracked after changing branches","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Sometimes, Revise stops tracking files when changing the Git branch. That is, modifications to Trixi's source files will not be reloaded by Revise and thus have no effect of a currently running REPL session. This issue is particularly annoying for a developer, since it does not come with any warning!  Therefore, it is good practice to always restart the REPL after changing branches.","category":"page"},{"location":"development/#Changes-to-type-definitions-are-not-allowed","page":"Development","title":"Changes to type definitions are not allowed","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Revise cannot handle changes to type definitions, e.g., when modifying the fields in a struct. In this case, Revise reports an error and refuses to run your code unless you undo the modifications. Once you undo the changes, Revise will usually continue to work as expected again. However, if you want to keep your type modifications, you need to restart the REPL.","category":"page"},{"location":"development/#Text-editors","page":"Development","title":"Text editors","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"When writing code, the choice of text editor can have a significant impact on productivity and developer satisfaction. While using the default text editor of the operating system has its own benefits (specifically the lack of an explicit installation procure), usually it makes sense to switch to a more programming-friendly tool. In the following, a few of the many options are listed and discussed:","category":"page"},{"location":"development/#VS-Code","page":"Development","title":"VS Code","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Visual Studio Code is a modern open source editor with good support for Julia. While Juno had some better support in the past, the developers of Juno and the Julia VS Code plugin are joining forces and concentrating on VS Code since support of Atom has been suspended. Basically, all comments on Juno below also apply to VS Code.","category":"page"},{"location":"development/#Juno","page":"Development","title":"Juno","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"If you are new to programming or do not have a preference for a text editor yet, Juno is a good choice for developing Julia code. It is based on Atom, a sophisticated and widely used editor for software developers, and is enhanced with several Julia-specific features. Furthermore and especially helpful for novice programmers, it has a MATLAB-like appearance with easy and interactive access to the current variables, the help system, and a debugger.","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"When using Juno's REPL to run Trixi, you cannot execute the bin/trixi script to start Trixi interactively. Instead, you can include the file utils/juno.jl, which will set the project path, load Revise (if installed), and import Trixi:","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia> include(\"utils/juno.jl\")","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Afterwards, you can start Trixi in the usual way by calling the Trixi.run method.","category":"page"},{"location":"development/#Vim-or-Emacs","page":"Development","title":"Vim or Emacs","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Vim and Emacs are both very popular editors that work great with Julia. One of their advantages is that they are text editors without a GUI and as such are available for almost any operating system. They also are preinstalled on virtually all Unix-like systems.  However, Vim and Emacs come with their own, steep learning curve if they have never been used before. Therfore, if in doubt, it is probably easier to get started with a classic GUI-based text edito (like Juno). If you decide to use Vim or Emacs, make sure that you install the corresponding Vim plugin julia-vim or Emacs major mode julia-emacs.","category":"page"},{"location":"development/#Releasing-a-new-version-of-Trixi,-Trixi2Vtk,-Trixi2Img","page":"Development","title":"Releasing a new version of Trixi, Trixi2Vtk, Trixi2Img","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Check whether everything is okay, tests pass etc.\nSet the new version number in Project.toml according to the Julian version of semver. Commit and push.\nComment @JuliaRegistrator register on the commit setting the version number.\nJuliaRegistrator will create a PR with the new version in the General registry. Wait for it to be merged.\nIncrement the version number in Project.toml again with suffix -pre. For example, if you have released version v0.2.0, use v0.2.1-pre as new version number.\nSet the correct version number in the badge \"GitHub commits since tagged version\" in README.md. The badge will only show up correctly if TagBot has released a new version. This will be done automatically over night. If you don't want to wait, trigger the GitHub Action TagBot manually.\nWhen a new version of Trixi was released, check whether the [compat] entries in test/Project.toml in Trixi2Vtk/Trixi2Img should be updated. When a new version of Trixi2Vtk/Trixi2Img was released, check whether the [compat] entries in docs/Project.toml in Trixi should be updated.\nThese entries will also be checked regularly by CompatHelper (once a day). Hence, if everything was released correctly, you should only need to do these checks manually if new minor versions with changes in the docs of Trixi2Vtk/Trixi2Img were released but no new version of Trixi was released afterwards.","category":"page"},{"location":"visualization/#Visualization","page":"Visualization","title":"Visualization","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"There are two tools provided with Trixi that allow to visualize Trixi's output files, both of which are available as Julia packages: Trixi2Vtk.jl and Trixi2Img.jl.","category":"page"},{"location":"visualization/#Trixi2Vtk","page":"Visualization","title":"Trixi2Vtk","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Trixi2Vtk converts Trixi's .h5 output files to VTK files, which can be read by ParaView, VisIt, and other visualization tools. It automatically interpolates solution data from the original quadrature node locations to equidistant visualization nodes at a higher resolution, to make up for the loss of accuracy from going from a high-order polynomial representation to a piecewise constant representation in VTK.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"In the Julia REPL, first load the package Trixi2Vtk","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> using Trixi2Vtk","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"To process an HDF5 file generated by Trixi.jl, execute","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2vtk(joinpath(\"out\", \"solution_000000.h5\"), output_directory=\"out\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"This will create two unstructured VTK files in the out/ subdirectory that can be opened with ParaView or VisIt: solution_000000.vtu contains the discontinuous Galerkin solution data while solution_000000_celldata.vtu holds any cell-based values such as the current AMR indicator or the cell refinement level.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"(Image: \"solution_000000_scalar_mesh\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"This allows you to generate VTK files for solution, restart and mesh files. By default, Trixi2Vtk generates .vtu (unstructured VTK) files for both cell/element data (e.g., cell ids, element ids) and node data (e.g., solution variables). This format visualizes each cell with the same number of nodes, independent of its size.  Alternatively, you can provide format=:vti as a keyword argument to trixi2vtk, which causes Trixi2Vtk to generate .vti (image data VTK) files for the solution files, while still using .vtu files for cell-/element-based data. In .vti files, a uniform resolution is used throughout the entire domain, resulting in different number of visualization nodes for each element.  This can be advantageous to create publication-quality images, but increases the file size.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"If you want to convert multiple solution/restart files at once, you can just supply multiple input files as the positional arguments to trixi2vtk, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2vtk(\"out/solution_000000.h5\", \"out/solution_000040.h5\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"You may also use file globbing to select a range of files based on filename patterns, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2vtk(\"out/solution_*.h5\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"to convert all solution files in the out/ directory or","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2vtk(\"out/restart_00[0-9]000.h5\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"to convert every one-thousandth restart file (out/restart_000000.h5, out/restart_001000.h5 etc.).","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"When multiple solution/restart files are provided, Trixi2Vtk will also generate a .pvd file, which allows ParaView to read all .vtu/.vti files at once and which uses the time attribute in solution/restart files to inform ParaView about the solution time. A comprehensive list of all possible arguments for trixi2vtk can be found in the Trixi2Vtk.jl API.","category":"page"},{"location":"visualization/#Trixi2Img","page":"Visualization","title":"Trixi2Img","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Trixi2Img can be used to directly convert Trixi's output files to image files, without having to use a third-pary visualization tool such as ParaView or VisIt. The downside of this approach is that it generally takes longer to visualize the data (especially for large files) and that it does not allow as much customization of the generated output files.  Currently, PNG and PDF are supported as output formats.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"In the Julia REPL, first load the package Trixi2Img","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> using Trixi2Img","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"To process an HDF5 file generated by Trixi.jl, execute","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2img(joinpath(\"out\", \"solution_000040.h5\"), output_directory=\"out\", grid_lines=true)","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"This will create a file solution_000040_scalar.png in the out/ subdirectory that can be opened with any image viewer:","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"(Image: \"solution_000040_scalar_resized\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Similar to Trixi2Vtk, you can also provide multiple files to trixi2img or use file globbing, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"julia> trixi2img(\"out/solution_*.h5\")","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"to convert all solution files. The default is to generate a PNG file for each variable found in the respective file. Use format=:pdf as a keyword argument to create PDF files. A comprehensive list of all possible arguments for trixi2img can be found in the Trixi2Img.jl API.","category":"page"},{"location":"github-git/#GitHub-and-Git","page":"GitHub & Git","title":"GitHub & Git","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"This page contains information on how to use GitHub and Git when developing Trixi.","category":"page"},{"location":"github-git/#Development-workflow","page":"GitHub & Git","title":"Development workflow","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"For adding modifcations to Trixi, we generally follow these steps:","category":"page"},{"location":"github-git/#Create-an-issue-(optional)","page":"GitHub & Git","title":"Create an issue (optional)","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"In many cases it makes sense to start by creating an issue on GitHub. For example, if the implementation approach for a new feature is not yet clear or if there should be a discussion about the desired outcome, it is good practice to first get a consensus on what is the expected result of this modification. A GitHub issue is the place to lead this discussion, as it preserves it in the project and - together with the actual code changes - allows in the future to revisit the reasons for a particular choice of implementation or feature.","category":"page"},{"location":"github-git/#Create-a-branch-and-*immediately*-create-a-pull-request","page":"GitHub & Git","title":"Create a branch and immediately create a pull request","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"All feature development, bug fixes etc. should be developed in a branch and not directly on master. If you do not have write access to the main repository on GitHub, first create a fork of the Trixi.jl repository and clone the fork to your machine. Then, create a branch locally by executing git checkout -b yourbranch, push it to the repository, and create a pull request (PR).","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"If you have already cloned Trixi.jl from the main repo to your local machine, you can also work in that clone. You just need to add your fork as additional remote repository and push your new branch there.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"git remote add myfork git@github.com:YOUR_NAME/Trixi.jl.git\n# get latest master from the main repo\ngit checkout master\ngit pull\n# create a new branch for a cool new feature, bug fix, ...\ngit checkout -b YOUR_BRANCH_NAME\n# do some work and push it to your fork\ngit push -u myfork\n# go to https://github.com/trixi-framework/Trixi.jl/pull\n# and create a PR from your new branch","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"info: Why using pull requests?\nImmediately creating a PR for your branch has the benefit that all code discussions can now be held directly next to the corresponding code. Also, the PR allows to easily compare your branch to the upstream branch (usually master) to see what you have changed.","category":"page"},{"location":"github-git/#Make-changes","page":"GitHub & Git","title":"Make changes","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"With a branch and PR in place, you can now write your code and commit it to your branch. If you request feedback from someone else, make sure to push your branch to the repository such that the others can easily review your changes or dive in and change something themselves.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"warning: Avoid committing unwanted files\nWhen you use git add . or similar catch-all versions, make sure you do not accidentally commit unwanted files (e.g., Trixi output files, images or videos etc.). If it happens anyways, you can undo the last commit (also multiple times) by running git reset HEAD~ (see also Undo last commit). However, this strategy only works if you have not yet pushed your changes. If you did push your changes, please talk to one of the core developers on how to proceed.","category":"page"},{"location":"github-git/#Keep-your-branch-in-sync-with-master","page":"GitHub & Git","title":"Keep your branch in sync with master","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"For larger features with longer-living branches, it may make sense to synchronize your branch with the current master, e.g., if there was a bug fix in master that is relevant for you. In this case, perform the following steps to merge the current master to your branch:","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Commit all your local changes to your branch and push it. This allows you to delete your clone in case you make a mistake and need to abort the merge.\nExecute git fetch to get the latest changes from the repository.\nMake sure you are in the correct branch by checking the output of git status or by running git checkout yourbranch.\nMerge master using git merge master. If there were no conflicts, hooray!, you are done. Otherwise you need to resolve your merge conflicts and commit the changes afterwards. A good guide for resolving merge conflicts can be found here.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"In general, always use git merge and not git rebase to get the latest changes from master. It is less error-prone and does not create problems on branches that are worked on collaboratively.","category":"page"},{"location":"github-git/#Prepare-for-review","page":"GitHub & Git","title":"Prepare for review","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"If you feel like your branch is ready to be merged to master, prepare it for review. That is, you should","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"merge the current master to your branch\nrun tests if available, but at least ensure that you did not accidentally change the results for one of the existing parameter files\nproperly comment your code\ndelete old/unused code, especially commented lines (unless they contain helpful code, in which case you should add a comment on why you keep this around)\nremove debug statements\nadd a parameters_xxx.toml that uses your feature (only relevant for new features)\nmake sure your code formatting adheres to the Style guide","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"After you are confident that your branch is cleaned up properly, commit all changes and push them to the repository.","category":"page"},{"location":"github-git/#Get-reviewed","page":"GitHub & Git","title":"Get reviewed","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Ask one of the core developers to review your code. Sometimes this will be done directly, either face-to-face or via a video call. Other times a review will be conducted asynchronously, with the reviewer leaving comments and annotations. In some cases it will be necessary to do multiple rounds of reviews, especially if there are larger changes to be added. Just commit and push your changes to your branch, and the corresponding pull request will be updated automatically.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Please note that a review has nothing to do with the lack of experience of the person developing changes: We try to review all code before it gets added to master, even from the most experienced developers. This is good practice and helps to keep the error rate low while ensuring the the code is developed in a consistent fashion. Furthermore, do not take criticism of your code personally - we just try to keep Trixi as accessible and easy to use for everyone.","category":"page"},{"location":"github-git/#Merge-branch","page":"GitHub & Git","title":"Merge branch","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Once your branch is reviewed and declared ready for merging by the reviewer, make sure that all the latest changes have been pushed. Then, go to the pull request page on GitHub and and click on Merge pull request. Voilá, you are done! Your branch will have been merged to master and the source branch will have been deleted in the GitHub repository (if you are not working in your own fork).","category":"page"},{"location":"github-git/#Update-your-working-copy","page":"GitHub & Git","title":"Update your working copy","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Once you have merged your branch by accepting the PR on GitHub, you should clean up your local working copy of the repository by performing the following steps:","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Update your clone by running git fetch.\nCheck out master using git checkout master.\nDelete merged branch locally with git branch -d yourbranch.\nRemove local references to deleted remote branch by executing git remote prune origin.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"You can now proceed with your next changes by starting again at the top.","category":"page"},{"location":"github-git/#Using-Git","page":"GitHub & Git","title":"Using Git","text":"","category":"section"},{"location":"github-git/#Resources-for-learning-Git","page":"GitHub & Git","title":"Resources for learning Git","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Here are a few resources for learning do use Git that at least one of us found helpful in the past (roughly ordered from novice to advanced to expert):","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Git Handbook by GitHub\nLearn Git Branching","category":"page"},{"location":"github-git/#Tips-and-tricks","page":"GitHub & Git","title":"Tips and tricks","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"This is an unordered collection of different tips and tricks that can be helpful while working with Git. As usual, your mileage might vary.","category":"page"},{"location":"github-git/#Undo-last-commit","page":"GitHub & Git","title":"Undo last commit","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"If you made a mistake in your last commit, e.g., by committing an unwanted file, you can undo the latest commit by running","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"git reset HEAD~","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"This only works if you have not yet pushed your branch to the GitHub repository. In this case, please talk to one of the core developers on how to proceed. Especially when you accidentally commited a large file (image, or video), please let us know as fast as possible, since the effort to fix the repository grows considerably over time.","category":"page"},{"location":"github-git/#Remove-large-file-from-repository","page":"GitHub & Git","title":"Remove large file from repository","text":"","category":"section"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"If a large file was accidentally committed and pushed to the Trixi repository, please talk to one of the core developers as soon as possible so that they can fix it.","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"danger: Danger\nYou should never try to fix this yourself, as it potentially disrupts/destroys the work of others!","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Based on the instructions found here and here, the following steps need to be taken (as documented for GitLab in issue #33):","category":"page"},{"location":"github-git/","page":"GitHub & Git","title":"GitHub & Git","text":"Tell everyone to commit and push their changes to the repository.\nFix the branch in which the file was committed by removing it and committing the removal. This is especially important on master.\nPerform the following steps to clean up the Git repository:\ncd /tmp\n\n# Download bfg-1.13.0.jar from https://rtyley.github.io/bfg-repo-cleaner/\n\n# Get fresh clone of repo (so you can throw it away in case there is a problem)\ngit clone --mirror git@github.com:trixi-framework/Trixi.jl.git\n\n# Clean up repo of all files larger than 10M\njava -jar bfg-1.13.0.jar --strip-blobs-bigger-than 10M Trixi.jl.git\n\n# Enter repo\ncd Trixi.jl.git\n\n# Clean up reflog and force aggressive garbage collection\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n\n# Push changes\ngit push\n\n# Delete clone\nrm -rf Trixi.jl.git\nTell everyone to clean up their local working copies by performing the following steps (also do this yourself):\n# Enter repo\ncd Trixi.jl\n\n# Get current changes\ngit fetch\n\n# Check out the fixed branch\ngit checkout branchname\n\n# IMPORTANT: Do a rebase instead of a pull!\ngit rebase\n\n# Clean reflog and force garbage collection\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\nIMPORTANT: You need to do a git rebase instead of a git pull when updating the fixed branch.","category":"page"},{"location":"reference-trixi2img/#Trixi2Img.jl-API","page":"Trixi2Img.jl","title":"Trixi2Img.jl API","text":"","category":"section"},{"location":"reference-trixi2img/","page":"Trixi2Img.jl","title":"Trixi2Img.jl","text":"CurrentModule = Trixi2Img","category":"page"},{"location":"reference-trixi2img/","page":"Trixi2Img.jl","title":"Trixi2Img.jl","text":"Modules = [Trixi2Img]","category":"page"},{"location":"reference-trixi2img/#Trixi2Img.ndim","page":"Trixi2Img.jl","title":"Trixi2Img.ndim","text":"ndims\n\nNumber of spatial dimensions (= 2).\n\n\n\n\n\n","category":"constant"},{"location":"reference-trixi2img/#Trixi2Img.trixi2img-Tuple{Vararg{AbstractString,N} where N}","page":"Trixi2Img.jl","title":"Trixi2Img.trixi2img","text":"trixi2img(filename::AbstractString...;\n        format=:png, variables=[], verbose=false, grid_lines=false,\n        output_directory=\".\", nvisnodes=nothing, max_supported_level=11)\n\nConvert two-dimensional Trixi-generated output files to image files (PNG or PDF).\n\nArguments\n\nfilename: One or more 2D solution/restart files generated by Trixi to create an image from.             Filenames support file globbing, e.g., \"solution*\" to match all files starting             with solution.\nformat: Output format for solution/restart files. Can be 'vtu' or 'vti'.\nvariables: Names of the variables to create images for. If empty, each variable found in the              input file(s) will be plotted.\nverbose: Set to true to enable verbose output.\ngrid_lines: Plot outline of elements. (warning: this is an expensive operation!)\noutput_directory: Output directory where generated files are stored.\nnvisnodes: Number of visualization nodes per element (default: twice the number of DG nodes).              A value of 0 (zero) uses the number of nodes in the DG elements.\nmax_supported_level: Maximum cell refinement level supported for plotting.\n\nExamples\n\njulia> trixi2img(\"out/solution_000*.h5\")\n[...]\n\n\n\n\n\n","category":"method"},{"location":"authors/#Authors","page":"Authors","title":"Authors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"Trixi's development is coordinated by a group of principal developers, who are also its main contributors and who can be contacted in case of questions about Trixi. In addition, there are contributors who have provided substantial additions or modifications. Together, these two groups form \"The Trixi Authors\" as mentioned under License.","category":"page"},{"location":"authors/#Principal-Developers","page":"Authors","title":"Principal Developers","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"Michael Schlottke-Lakemper, University of Cologne, Germany\nGregor Gassner, University of Cologne, Germany\nHendrik Ranocha, KAUST (King Abdullah University of Science and Technology), Saudi Arabia\nAndrew Winters, Linköping University, Sweden","category":"page"},{"location":"authors/#Contributors","page":"Authors","title":"Contributors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"The following people contributed major additions or modifications to Trixi and are listed in alphabetical order:","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"Erik Faulhaber\nGregor Gassner\nHendrik Ranocha\nMichael Schlottke-Lakemper\nAndrew Winters","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2020-present The Trixi Authors (see Authors)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference-trixi/#Trixi.jl-API","page":"Trixi.jl","title":"Trixi.jl API","text":"","category":"section"},{"location":"reference-trixi/","page":"Trixi.jl","title":"Trixi.jl","text":"CurrentModule = Trixi","category":"page"},{"location":"reference-trixi/","page":"Trixi.jl","title":"Trixi.jl","text":"Modules = [Trixi]","category":"page"},{"location":"reference-trixi/#Trixi.Trixi","page":"Trixi.jl","title":"Trixi.Trixi","text":"Trixi\n\nTrixi.jl is a numerical simulation framework for hyperbolic conservation laws. A key objective for the framework is to be useful to both scientists and students. Therefore, next to having an extensible design with a fast implementation, Trixi is focused on being easy to use for new or inexperienced users, including the installation and postprocessing procedures.\n\nSee also: trixi-framework/Trixi.jl\n\n\n\n\n\n","category":"module"},{"location":"reference-trixi/#Trixi.CompressibleEulerEquations2D","page":"Trixi.jl","title":"Trixi.CompressibleEulerEquations2D","text":"CompressibleEulerEquations2D\n\nThe compressible Euler equations for an ideal gas in two space dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.CompressibleEulerEquations3D","page":"Trixi.jl","title":"Trixi.CompressibleEulerEquations3D","text":"CompressibleEulerEquations3D\n\nThe compressible Euler equations for an ideal gas in three space dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.HyperbolicDiffusionEquations2D","page":"Trixi.jl","title":"Trixi.HyperbolicDiffusionEquations2D","text":"HyperbolicDiffusionEquations2D\n\nThe linear hyperbolic diffusion equations in two space dimensions. A description of this system can be found in Sec. 2.5 of the book \"I Do Like CFD, Too: Vol 1\". The book is freely available at http://www.cfdbooks.com/ and further analysis can be found in the paper by Nishikawa DOI: 10.1016/j.jcp.2007.07.029\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.HyperbolicDiffusionEquations3D","page":"Trixi.jl","title":"Trixi.HyperbolicDiffusionEquations3D","text":"HyperbolicDiffusionEquations3D\n\nThe linear hyperbolic diffusion equations in three space dimensions. A description of this system can be found in Sec. 2.5 of the book \"I Do Like CFD, Too: Vol 1\". The book is freely available at http://www.cfdbooks.com/ and further analysis can be found in the paper by Nishikawa DOI: 10.1016/j.jcp.2007.07.029\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.IdealGlmMhdEquations2D","page":"Trixi.jl","title":"Trixi.IdealGlmMhdEquations2D","text":"IdealGlmMhdEquations2D\n\nThe ideal compressible GLM-MHD equations in two space dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.IdealGlmMhdEquations3D","page":"Trixi.jl","title":"Trixi.IdealGlmMhdEquations3D","text":"IdealGlmMhdEquations3D\n\nThe ideal compressible GLM-MHD equations in three space dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.LinearScalarAdvectionEquation2D","page":"Trixi.jl","title":"Trixi.LinearScalarAdvectionEquation2D","text":"LinearScalarAdvectionEquation2D\n\nThe linear scalar advection equation\n\npartial_t u + a_1 partial_1 u + a_2 partial_2 u = 0\n\nin two space dimensions with constant velocity a.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Trixi.LinearScalarAdvectionEquation3D","page":"Trixi.jl","title":"Trixi.LinearScalarAdvectionEquation3D","text":"LinearScalarAdvectionEquation3D\n\nThe linear scalar advection equation\n\npartial_t u + a_1 partial_1 u + a_2 partial_2 u + a_3 partial_3 u = 0\n\nin two space dimensions with constant velocity a.\n\n\n\n\n\n","category":"type"},{"location":"reference-trixi/#Base.resize!-Tuple{Trixi.AbstractContainer,Any}","page":"Trixi.jl","title":"Base.resize!","text":"resize!(c::AbstractContainer, new_length) -> AbstractContainer\n\nResize c to contain new_length elements. If new_length is smaller than the current container length, the first new_length elements will be retained. If new_length is larger, the new elements are invalidated.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.analyze_solution-Tuple{Trixi.Dg2D,Trixi.TreeMesh,Real,Real,Integer,Real,Real}","page":"Trixi.jl","title":"Trixi.analyze_solution","text":"analyze_solution(dg::Dg2D, mesh::TreeMesh, time, dt, step, runtime_absolute, runtime_relative)\n\nCalculate error norms and other analysis quantities to analyze the solution during a simulation, and return the L2 and Linf errors. dg and mesh are the DG and the mesh instance, respectively. time, dt, and step refer to the current simulation time, the last time step size, and the current time step count. The run time (in seconds) is given in runtime_absolute, while the performance index is specified in runtime_relative.\n\nNote: Keep order of analysis quantities in sync with           save_analysis_header when adding or changing quantities.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.analyze_solution-Tuple{Trixi.Dg3D,Trixi.TreeMesh,Real,Real,Integer,Real,Real}","page":"Trixi.jl","title":"Trixi.analyze_solution","text":"analyze_solution(dg::Dg3D, mesh::TreeMesh, time, dt, step, runtime_absolute, runtime_relative)\n\nCalculate error norms and other analysis quantities to analyze the solution during a simulation, and return the L2 and Linf errors. dg and mesh are the DG and the mesh instance, respectively. time, dt, and step refer to the current simulation time, the last time step size, and the current time step count. The run time (in seconds) is given in runtime_absolute, while the performance index is specified in runtime_relative.\n\nNote: Keep order of analysis quantities in sync with           save_analysis_header when adding or changing quantities.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calc_error_norms","page":"Trixi.jl","title":"Trixi.calc_error_norms","text":"calc_error_norms([func=(u,equation)->u,] solver, t)\n\nCalculate the discrete L2 and L∞ errors of func applied to the conservative variables of the problem encapsulated by solver at time t, where func is called as func(u, equation).\n\n\n\n\n\n","category":"function"},{"location":"reference-trixi/#Trixi.calc_fast_wavespeed_roe-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations2D}","page":"Trixi.jl","title":"Trixi.calc_fast_wavespeed_roe","text":"calc_fast_wavespeed_roe(u_ll, u_rr, direction, equation::IdealGlmMhdEquations2D)\n\nCompute the fast magnetoacoustic wave speed using Roe averages as given by Cargo and Gallice (1997)   Roe Matrices for Ideal MHD and Systematic Construction   of Roe Matrices for Systems of Conservation Laws DOI: 10.1006/jcph.1997.5773\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calc_fast_wavespeed_roe-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations3D}","page":"Trixi.jl","title":"Trixi.calc_fast_wavespeed_roe","text":"calc_fast_wavespeed_roe(u_ll, u_rr, direction, equation::IdealGlmMhdEquations3D)\n\nCompute the fast magnetoacoustic wave speed using Roe averages as given by Cargo and Gallice (1997)   Roe Matrices for Ideal MHD and Systematic Construction   of Roe Matrices for Systems of Conservation Laws DOI: 10.1006/jcph.1997.5773\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calc_fstar!-Tuple{Any,Any,Any,Any,Any,Trixi.Dg2D}","page":"Trixi.jl","title":"Trixi.calc_fstar!","text":"calc_fstar!(destination, u_interfaces_left, u_interfaces_right, interface_id, orientations, dg::Dg2D)\n\nCalculate the surface flux across interface with different states given by u_interfaces_left, u_interfaces_right on both sides (EC mortar version).\n\nArguments\n\ndestination::AbstractArray{T,3} where T<:Real: The array of surface flux values (updated inplace).\nu_interfaces_left::AbstractArray{T,3} where T<:Real`\nu_interfaces_right::AbstractArray{T,3} where T<:Real`\ninterface_id::Integer\norientations::Vector{T} where T<:Integer\ndg::Dg2D\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calc_fstar!-Tuple{Any,Any,Any,Any,Trixi.Dg2D}","page":"Trixi.jl","title":"Trixi.calc_fstar!","text":"calc_fstar!(destination, u_interfaces, interface_id, orientations, dg::Dg2D)\n\nCalculate the surface flux across interface with different states given by u_interfaces_left, u_interfaces_right on both sides (interface version).\n\nArguments\n\ndestination::AbstractArray{T,2} where T<:Real: The array of surface flux values (updated inplace).\nu_interfaces::AbstractArray{T,4} where T<:Real`\ninterface_id::Integer\norientations::Vector{T} where T<:Integer\ndg::Dg2D\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calc_fstar!-Tuple{Any,Any,Any,Any,Trixi.Dg3D}","page":"Trixi.jl","title":"Trixi.calc_fstar!","text":"calc_fstar!(destination, u_interfaces, interface_id, orientations, dg::Dg3D)\n\nCalculate the surface flux across interface with different states given by u_interfaces_left, u_interfaces_right on both sides. Only used by calc_interface_flux! for interfaces with non-conservative terms and for L2 mortars.\n\nArguments\n\ndestination::AbstractArray{T,3} where T<:Real: The array of surface flux values (updated inplace).\nu_interfaces::AbstractArray{T,5} where T<:Real`\ninterface_id::Integer\norientations::Vector{T} where T<:Integer\ndg::Dg3D\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calcflux_fv!-Tuple{Any,Any,Any,Any,Any,Trixi.Dg3D}","page":"Trixi.jl","title":"Trixi.calcflux_fv!","text":"calcflux_fv!(fstar1, fstar2, fstar3, u_leftright, u, element_id, dg::Dg3D)\n\nCalculate the finite volume fluxes inside the elements.\n\nArguments\n\nfstar1::AbstractArray{T} where T<:Real:\nfstar2::AbstractArray{T} where T<:Real\nfstar3::AbstractArray{T} where T<:Real\ndg::Dg3D\nu::AbstractArray{T} where T<:Real\nelement_id::Integer\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.calcflux_fv!-Tuple{Any,Any,Any,Any,Trixi.Dg2D}","page":"Trixi.jl","title":"Trixi.calcflux_fv!","text":"calcflux_fv!(fstar1, fstar2, u_leftright, u, element_id, dg::Dg2D)\n\nCalculate the finite volume fluxes inside the elements.\n\nArguments\n\nfstar1::AbstractArray{T} where T<:Real:\nfstar2::AbstractArray{T} where T<:Real\ndg::Dg2D\nu::AbstractArray{T} where T<:Real\nelement_id::Integer\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.compute_jacobian_dg-Tuple{Any}","page":"Trixi.jl","title":"Trixi.compute_jacobian_dg","text":"compute_jacobian_dg(parameters_file=nothing; verbose=false, parameters...)\n\nUses DG right hand side operator and simple second order finite difference to compute the Jacobian J of the operator. The linearisation state is the initial condition from the parameter file. Returns J.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.compute_linear_structure","page":"Trixi.jl","title":"Trixi.compute_linear_structure","text":"compute_linear_structure(parameters_file, source_terms=nothing; verbose=false, parameters...)\n\nComputes the exact Jacobian A of a linear DG operator wrapped as a LinearMap and the right hand side b. Returns A, b.\n\n\n\n\n\n","category":"function"},{"location":"reference-trixi/#Trixi.convtest-Tuple{Any,Any}","page":"Trixi.jl","title":"Trixi.convtest","text":"convtest(parameters_file, iterations; parameters...)\n\nRun multiple Trixi simulations with the parameters in parameters_file and compute the experimental order of convergence (EOC) in the L^2 and L^infty norm. The number of runs is specified by iterations and in each run the initial refinement level will be increased by 1. Parameters can be overriden by specifying them as additional keyword arguments, which are passed to the respective call to run..\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.default_example-Tuple{}","page":"Trixi.jl","title":"Trixi.default_example","text":"default_example()\n\nReturn the path to an example parameter file that can be used to quickly see Trixi in action.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.element_solutions_to_mortars!-Tuple{Trixi.Dg2D,Val{:l2},Any,Any,Any}","page":"Trixi.jl","title":"Trixi.element_solutions_to_mortars!","text":"element_solutions_to_mortars!(dg::Dg2D, ::Val{:l2}, leftright, m, u_large)\n\nInterpolate u_large to dg.l2mortars.u_[upper/lower] for mortar m using the forward mortar operators of dg.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.element_solutions_to_mortars!-Tuple{Trixi.Dg3D,Val{:l2},Any,Any,Any,Any}","page":"Trixi.jl","title":"Trixi.element_solutions_to_mortars!","text":"element_solutions_to_mortars!(dg::Dg3D, ::Val{:l2}, leftright, m, u_large, fstar_tmp1)\n\nInterpolate u_large to dg.l2mortars.u_[upper/lower]_[left/right] for mortar m using the forward mortar operators of dg and fstar_tmp1 as temporary storage.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.examples_dir-Tuple{}","page":"Trixi.jl","title":"Trixi.examples_dir","text":"examples_dir()\n\nReturn the directory where the example files provided with Trixi.jl are located. If Trixi is installed as a regular package (with ]add Trixi), these files are read-only and should not be modified. To find out which files are available, use, e.g., readdir:\n\nExamples\n\njulia> readdir(examples_dir())\n4-element Array{String,1}:\n \"2d\"\n \"3d\"\n \"README.md\"\n \"paper-self-gravitating-gas-dynamics\"\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_central-Tuple{Any,Any,Any,Trixi.AbstractEquation}","page":"Trixi.jl","title":"Trixi.flux_central","text":"flux_central(u_ll, u_rr, orientation, equation::AbstractEquation)\n\nThe classical central numerical flux f((u_ll) + f(u_rr)) / 2. When this flux is used as volume flux, the discretization is equivalent to the classical weak form DG method (except floating point errors).\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_chandrashekar-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations2D}","page":"Trixi.jl","title":"Trixi.flux_chandrashekar","text":"flux_chandrashekar(u_ll, u_rr, orientation, equation::CompressibleEulerEquations2D)\n\nEntropy conserving two-point flux by Chandrashekar (2013)   Kinetic Energy Preserving and Entropy Stable Finite Volume Schemes   for Compressible Euler and Navier-Stokes Equations DOI: 10.4208/cicp.170712.010313a\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_chandrashekar-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations3D}","page":"Trixi.jl","title":"Trixi.flux_chandrashekar","text":"flux_chandrashekar(u_ll, u_rr, orientation, equation::CompressibleEulerEquations3D)\n\nEntropy conserving two-point flux by Chandrashekar (2013)   Kinetic Energy Preserving and Entropy Stable Finite Volume Schemes   for Compressible Euler and Navier-Stokes Equations DOI: 10.4208/cicp.170712.010313a\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_derigs_etal-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations2D}","page":"Trixi.jl","title":"Trixi.flux_derigs_etal","text":"flux_derigs_etal(u_ll, u_rr, orientation, equation::IdealGlmMhdEquations2D)\n\nEntropy conserving two-point flux by Derigs et al. (2018)   Ideal GLM-MHD: About the entropy consistent nine-wave magnetic field   divergence diminishing ideal magnetohydrodynamics equations DOI: 10.1016/j.jcp.2018.03.002\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_derigs_etal-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations3D}","page":"Trixi.jl","title":"Trixi.flux_derigs_etal","text":"flux_derigs_etal(u_ll, u_rr, orientation, equation::IdealGlmMhdEquations3D)\n\nEntropy conserving two-point flux by Derigs et al. (2018)   Ideal GLM-MHD: About the entropy consistent nine-wave magnetic field   divergence diminishing ideal magnetohydrodynamics equations DOI: 10.1016/j.jcp.2018.03.002\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_hll-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations2D}","page":"Trixi.jl","title":"Trixi.flux_hll","text":"flux_hll(u_ll, u_rr, orientation, equation::IdealGlmMhdEquations2D)\n\nHLL flux for ideal GLM-MHD equations like that by Li (2005)   An HLLC Riemann solver for magneto-hydrodynamics DOI: 10.1016/j.jcp.2004.08.020\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_hll-Tuple{Any,Any,Any,Trixi.IdealGlmMhdEquations3D}","page":"Trixi.jl","title":"Trixi.flux_hll","text":"flux_hll(u_ll, u_rr, orientation, equation::IdealGlmMhdEquations3D)\n\nHLL flux for ideal GLM-MHD equations like that by Li (2005)   An HLLC Riemann solver for magneto-hydrodynamics DOI: 10.1016/j.jcp.2004.08.020\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_hllc-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations3D}","page":"Trixi.jl","title":"Trixi.flux_hllc","text":"flux_hllc(u_ll, u_rr, orientation, equation::CompressibleEulerEquations3D)\n\nComputes the HLLC flux (HLL with Contact) for compressible Euler equations developed by E.F. Toro http://www.prague-sum.com/download/2012/Toro_2-HLLC-RiemannSolver.pdf Signal speeds: https://sci-hub.tw/https://doi.org/10.1137/S1064827593260140\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_kennedy_gruber-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations2D}","page":"Trixi.jl","title":"Trixi.flux_kennedy_gruber","text":"flux_kennedy_gruber(u_ll, u_rr, orientation, equation::CompressibleEulerEquations2D)\n\nKinetic energy preserving two-point flux by Kennedy and Gruber (2008)   Reduced aliasing formulations of the convective terms within the   Navier-Stokes equations for a compressible fluid DOI: 10.1016/j.jcp.2007.09.020\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_kennedy_gruber-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations3D}","page":"Trixi.jl","title":"Trixi.flux_kennedy_gruber","text":"flux_kennedy_gruber(u_ll, u_rr, orientation, equation::CompressibleEulerEquations3D)\n\nKinetic energy preserving two-point flux by Kennedy and Gruber (2008)   Reduced aliasing formulations of the convective terms within the   Navier-Stokes equations for a compressible fluid DOI: 10.1016/j.jcp.2007.09.020\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_ranocha-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations2D}","page":"Trixi.jl","title":"Trixi.flux_ranocha","text":"flux_ranocha(u_ll, u_rr, orientation, equation::CompressibleEulerEquations2D)\n\nEntropy conserving and kinetic energy preserving two-point flux by Ranocha (2018)   Generalised Summation-by-Parts Operators and Entropy Stability of Numerical Methods   for Hyperbolic Balance Laws PhD thesis, TU Braunschweig See also Ranocha (2020)   Entropy Conserving and Kinetic Energy Preserving Numerical Methods for   the Euler Equations Using Summation-by-Parts Operators Proceedings of ICOSAHOM 2018\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_ranocha-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations3D}","page":"Trixi.jl","title":"Trixi.flux_ranocha","text":"flux_ranocha(u_ll, u_rr, orientation, equation::CompressibleEulerEquations3D)\n\nEntropy conserving and kinetic energy preserving two-point flux by Ranocha (2018)   Generalised Summation-by-Parts Operators and Entropy Stability of Numerical Methods   for Hyperbolic Balance Laws PhD thesis, TU Braunschweig See also Ranocha (2020)   Entropy Conserving and Kinetic Energy Preserving Numerical Methods for   the Euler Equations Using Summation-by-Parts Operators Proceedings of ICOSAHOM 2018\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_shima_etal-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations2D}","page":"Trixi.jl","title":"Trixi.flux_shima_etal","text":"function flux_shima_etal(u_ll, u_rr, orientation, equation::CompressibleEulerEquations2D)\n\nThis flux is is a modification of the original kinetic energy preserving two-point flux by Kuya, Totani and Kawai (2018)   Kinetic energy and entropy preserving schemes for compressible flows   by split convective forms   DOI: 10.1016/j.jcp.2018.08.058 The modification is in the energy flux to guarantee pressure equilibrium and was developed by Nao Shima, Yuichi Kuya, Yoshiharu Tamaki, Soshi Kawai (JCP 2020)   Preventing spurious pressure oscillations in split convective form discretizations for   compressible flows\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.flux_shima_etal-Tuple{Any,Any,Any,Trixi.CompressibleEulerEquations3D}","page":"Trixi.jl","title":"Trixi.flux_shima_etal","text":"function flux_shima_etal(u_ll, u_rr, orientation, equation::CompressibleEulerEquations3D)\n\nThis flux is is a modification of the original kinetic energy preserving two-point flux by Kuya, Totani and Kawai (2018)   Kinetic energy and entropy preserving schemes for compressible flows   by split convective forms   DOI: 10.1016/j.jcp.2018.08.058 The modification is in the energy flux to guarantee pressure equilibrium and was developed by Nao Shima, Yuichi Kuya, Yoshiharu Tamaki, Soshi Kawai (JCP 2020)   Preventing spurious pressure oscillations in split convective form discretizations for   compressible flows\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.get_examples-Tuple{}","page":"Trixi.jl","title":"Trixi.get_examples","text":"get_examples()\n\nReturn a list of all example parameter files that are provided by Trixi.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.get_name-Tuple{Any}","page":"Trixi.jl","title":"Trixi.get_name","text":"get_name(x)\n\nReturns a name of x ready for pretty printing. By default, return string(y) if x isa Val{y} and return string(x) otherwise.\n\nExamples\n\njulia> Trixi.get_name(\"test\")\n\"test\"\n\njulia> Trixi.get_name(Val(:test))\n\"test\"\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.get_node_coords-Tuple{Any,Trixi.AbstractDg,Vararg{Any,N} where N}","page":"Trixi.jl","title":"Trixi.get_node_coords","text":"get_node_coords(x, dg::AbstractDg, indices...)\n\nReturn an ndims(dg)-dimensional SVector for the DG node specified via the i, j, k, element_id indices (3D) or i, j, element_id indices (2D).\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.get_node_vars-Tuple{Any,Trixi.AbstractDg,Vararg{Any,N} where N}","page":"Trixi.jl","title":"Trixi.get_node_vars","text":"get_node_vars(u, dg::AbstractDg, indices...)\n\nReturn an nvariables(dg)-dimensional SVector of the conservative variables for the DG node specified via the i, j, k, element_id indices (3D) or i, j, element_id indices (2D).\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.initial_conditions_density_wave-Tuple{Any,Any,Trixi.CompressibleEulerEquations2D}","page":"Trixi.jl","title":"Trixi.initial_conditions_density_wave","text":"initial_conditions_density_wave(x, t, equation::CompressibleEulerEquations2D)\n\ntest case for stability of EC fluxes from paper: https://arxiv.org/pdf/2007.09026.pdf domain [-1, 1]^2 mesh = 4x4, polydeg = 5\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.integrate-Tuple{Any,Any,Trixi.Dg2D}","page":"Trixi.jl","title":"Trixi.integrate","text":"integrate(func, u, dg::Dg2D; normalize=true)\nintegrate(u, dg::Dg2D; normalize=true)\n\nCall function func for each DG node and integrate the result over the computational domain.\n\nThe function func is called as func(u_local) for each volume node (i, j) and each element_id, where u_local is an SVectorized copy of u[:, i, j, element_id]. If normalize is true, the result is divided by the total volume of the computational domain. If func is omitted, it defaults to identity.\n\nExamples\n\nCalculate the integral over all conservative variables:\n\nstate_integrals = integrate(dg.elements.u, dg)\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.integrate-Tuple{Any,Any,Trixi.Dg3D}","page":"Trixi.jl","title":"Trixi.integrate","text":"integrate(func, u, dg::Dg3D; normalize=true)\nintegrate(u, dg::Dg3D; normalize=true)\n\nCall function func for each DG node and integrate the result over the computational domain.\n\nThe function func is called as func(u_local) for each volume node (i, j, k) and each element_id, where u_local is an SVectorized copy of u[:, i, j, k, element_id]. If normalize is true, the result is divided by the total volume of the computational domain. If func is omitted, it defaults to identity.\n\nExamples\n\nCalculate the integral over all conservative variables:\n\nstate_integrals = integrate(dg.elements.u, dg)\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.integrate-Tuple{Any,Trixi.Dg2D,Vararg{Any,N} where N}","page":"Trixi.jl","title":"Trixi.integrate","text":"integrate(func, dg::Dg2D, args...; normalize=true)\n\nCall function func for each DG node and integrate the result over the computational domain.\n\nThe function func is called as func(i, j, element_id, dg, args...) for each volume node (i, j) and each element_id. Additional positional arguments args... are passed along as well. If normalize is true, the result is divided by the total volume of the computational domain.\n\nExamples\n\nCalculate the integral of the time derivative of the entropy, i.e., ∫(∂S/∂t)dΩ = ∫(∂S/∂u ⋅ ∂u/∂t)dΩ:\n\n# Calculate integral of entropy time derivative\ndsdu_ut = integrate(dg, dg.elements.u, dg.elements.u_t) do i, j, element_id, dg, u, u_t\n  u_node   = get_node_vars(u,   dg, i, j, element_id)\n  u_t_node = get_node_vars(u_t, dg, i, j, element_id)\n  dot(cons2entropy(u_node, equations(dg)), u_t_node)\nend\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.integrate-Tuple{Any,Trixi.Dg3D,Vararg{Any,N} where N}","page":"Trixi.jl","title":"Trixi.integrate","text":"integrate(func, dg::Dg3D, args...; normalize=true)\n\nCall function func for each DG node and integrate the result over the computational domain.\n\nThe function func is called as func(i, j, k, element_id, dg, args...) for each volume node (i, j, k) and each element_id. Additional positional arguments args... are passed along as well. If normalize is true, the result is divided by the total volume of the computational domain.\n\nExamples\n\nCalculate the integral of the time derivative of the entropy, i.e., ∫(∂S/∂t)dΩ = ∫(∂S/∂u ⋅ ∂u/∂t)dΩ:\n\n# Calculate integral of entropy time derivative\ndsdu_ut = integrate(dg, dg.elements.u, dg.elements.u_t) do i, j, k, element_id, dg, u, u_t\n  u_node   = get_node_vars(u,   dg, i, j, k, element_id)\n  u_t_node = get_node_vars(u_t, dg, i, j, k, element_id)\n  dot(cons2entropy(u_node, equations(dg)), u_t_node)\nend\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.mortar_fluxes_to_elements!-Tuple{Any,Trixi.Dg2D,Val{:l2},Any,Any,Any}","page":"Trixi.jl","title":"Trixi.mortar_fluxes_to_elements!","text":"mortar_fluxes_to_elements!(surface_flux_values, dg::Dg2D, mortar_type::Val{:l2}, m, fstar_upper, fstar_lower)\n\nCopy/project fstar_[upper/lower] to surface_flux_values for mortar m using the reverse mortar operators of dg.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.mortar_fluxes_to_elements!-Tuple{Any,Trixi.Dg3D,Val{:l2},Any,Any,Any,Any,Any,Any}","page":"Trixi.jl","title":"Trixi.mortar_fluxes_to_elements!","text":"mortar_fluxes_to_elements!(surface_flux_values, dg::Dg3D, mortar_type::Val{:l2}, m,\n                           fstar_upper_left, fstar_upper_right,\n                           fstar_lower_left, fstar_lower_right,\n                           fstar_tmp1)\n\nCopy/project fstar_[upper/lower]_[left/right to surface_flux_values for mortar m using the reverse mortar operators of dg and fstar_tmp1 as temporary storage.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.multiply_dimensionwise-Tuple{AbstractArray{T,2} where T,AbstractArray{var\"#s51\",2} where var\"#s51\"}","page":"Trixi.jl","title":"Trixi.multiply_dimensionwise","text":"multiply_dimensionwise(matrix::AbstractMatrix, data_in::AbstractArray{<:Any, NDIMS+1})\n\nMultiply the array data_in by matrix in each coordinate direction, where data_in is assumed to have the first coordinate for the number of variables and the remaining coordinates are multiplied by matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.pure_and_blended_element_ids!-Tuple{Any,Any,Any,Trixi.Dg2D}","page":"Trixi.jl","title":"Trixi.pure_and_blended_element_ids!","text":"pure_and_blended_element_ids!(element_ids_dg, element_ids_dgfv, alpha, dg)\n\nGiven blending factors alpha and the solver dg, fill element_ids_dg with the IDs of elements using a pure DG scheme and element_ids_dgfv with the IDs of elements using a blended DG-FV scheme.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.pure_and_blended_element_ids!-Tuple{Any,Any,Any,Trixi.Dg3D}","page":"Trixi.jl","title":"Trixi.pure_and_blended_element_ids!","text":"pure_and_blended_element_ids!(element_ids_dg, element_ids_dgfv, alpha, dg)\n\nGiven blending factors alpha and the solver dg, fill element_ids_dg with the IDs of elements using a pure DG scheme and element_ids_dgfv with the IDs of elements using a blended DG-FV scheme.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.run-Tuple{Any}","page":"Trixi.jl","title":"Trixi.run","text":"run(parameters_file; verbose=false, refinement_level_increment=0, parameters...)\n\nRun a Trixi simulation with the parameters in parameters_file. Parameters can be overriden by specifying them as keyword arguments (see examples).\n\nIf verbose is true, additional output will be generated on the terminal that may help with debugging. If a value for refinement_level_increment is given, initial_refinement_level will be increased by this value before running the simulation (mostly used by EOC analysis).\n\nExamples\n\njulia> Trixi.run(\"examples/parameters.toml\", verbose=true)\n[...]\n\nWithout changing the parameters file we can start a simulation with polydeg = 1 and t_end = 0.5 as follows:\n\njulia> Trixi.run(\"examples/parameters.toml\", polydeg=1, t_end=0.5)\n[...]\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.save_analysis_header-Tuple{Any,Any,Trixi.AbstractEquation{2,NVARS} where NVARS}","page":"Trixi.jl","title":"Trixi.save_analysis_header","text":"save_analysis_header(filename, quantities, equation)\n\nTruncate file filename and save a header with the names of the quantities quantities that will subsequently written to filename by analyze_solution. Since some quantities are equation-specific, the system of equations instance is passed in equation.\n\nNote: Keep order of analysis quantities in sync with           analyze_solution when adding or changing quantities.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.save_analysis_header-Tuple{Any,Any,Trixi.AbstractEquation{3,NVARS} where NVARS}","page":"Trixi.jl","title":"Trixi.save_analysis_header","text":"save_analysis_header(filename, quantities, equation)\n\nTruncate file filename and save a header with the names of the quantities quantities that will subsequently written to filename by analyze_solution. Since some quantities are equation-specific, the system of equations instance is passed in equation.\n\nNote: Keep order of analysis quantities in sync with           analyze_solution when adding or changing quantities.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.setparameter-Tuple{String,Any}","page":"Trixi.jl","title":"Trixi.setparameter","text":"setparameter(name::String, value)\n\nSet parameter with the specified name to the specified value.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_2N!-NTuple{6,Any}","page":"Trixi.jl","title":"Trixi.timestep_2N!","text":"timestep_2N!(solver, t, dt, a, b, c)\n\nPerform one timestep using an explicit Runge-Kutta method of the low-storage class 2N of Williamson.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_3Sstar!-NTuple{9,Any}","page":"Trixi.jl","title":"Trixi.timestep_3Sstar!","text":"timestep_3Sstar!(solver, t, dt, gamma1, gamma2, gamma3, beta, delta, c)\n\nPerform one timestep using an explicit Runge-Kutta method of the low-storage class 3Sstar of Ketcheson.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_carpenter_kennedy_erk43_2N!-Tuple{Trixi.AbstractSolver,Any,Any}","page":"Trixi.jl","title":"Trixi.timestep_carpenter_kennedy_erk43_2N!","text":"timestep_carpenter_kennedy_erk43_2N!(solver::AbstractSolver, t, dt)\n\nCarpenter, Kennedy (1994) Third order 2N storage RK schemes with error control\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_carpenter_kennedy_erk54_2N!-Tuple{Trixi.AbstractSolver,Any,Any}","page":"Trixi.jl","title":"Trixi.timestep_carpenter_kennedy_erk54_2N!","text":"timestep_carpenter_kennedy_erk54_2N!(solver::AbstractSolver, t, dt)\n\nCarpenter, Kennedy (1994) Fourth order 2N storage RK schemes, Solution 3\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_hyp_diff_N3_erk52_3Sstar!-Tuple{Trixi.AbstractSolver,Any,Any}","page":"Trixi.jl","title":"Trixi.timestep_hyp_diff_N3_erk52_3Sstar!","text":"timestep_hyp_diff_N3_erk52_3Sstar!(solver::AbstractSolver, t, dt)\n\nFive stage, second-order acurate explicit Runge-Kutta scheme with stability region optimized for the hyperbolic diffusion equation with LLF flux and polynomials of degree polydeg=3.\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_parsani_ketcheson_deconinck_erk32_3Sstar!-Tuple{Trixi.AbstractSolver,Any,Any}","page":"Trixi.jl","title":"Trixi.timestep_parsani_ketcheson_deconinck_erk32_3Sstar!","text":"timestep_parsani_ketcheson_deconinck_erk32_3Sstar!(solver::AbstractSolver, t, dt)\n\nParsani, Ketcheson, Deconinck (2013)   Optimized explicit RK schemes for the spectral difference method applied to wave propagation problems DOI: 10.1137/120885899\n\n\n\n\n\n","category":"method"},{"location":"reference-trixi/#Trixi.timestep_parsani_ketcheson_deconinck_erk94_3Sstar!-Tuple{Trixi.AbstractSolver,Any,Any}","page":"Trixi.jl","title":"Trixi.timestep_parsani_ketcheson_deconinck_erk94_3Sstar!","text":"timestep_parsani_ketcheson_deconinck_erk94_3Sstar!(solver::AbstractSolver, t, dt)\n\nParsani, Ketcheson, Deconinck (2013)   Optimized explicit RK schemes for the spectral difference method applied to wave propagation problems DOI: 10.1137/120885899\n\n\n\n\n\n","category":"method"},{"location":"styleguide/#Style-guide","page":"Style guide","title":"Style guide","text":"","category":"section"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"The following lists a few coding conventions for Trixi:","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"Modules, types, structs with CamelCase.\nFunctions, variables with lowercase snake_case.\nIndentation with 2 spaces (never tabs!), line continuations indented with 4 spaces.\nMaximum line length (strictly): 100.\nFunctions that mutate their input are named with a trailing !.\nFunctions order their parameters similar to Julia Base.\nPrefer for i in ... to for i = ... for better semantic clarity and greater flexibility.\nExecutable code should only use ASCII characters.\nDocstrings and comments can and should use Unicode characters where it helps understanding.\nMultiline expressions should be explicitly grouped by parentheses and not rely on Julia's implicit line continuation syntax.\nWhen naming multiple functions of a single or similar category, prefer to put the general classification first and the specialization second. Example: Use flux_central instead of central_flux. This helps when searching for available functions on the REPL (e.g., when trying to find all flux functions).","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"Based on that, and personal experience, a formatting tool with a few helpful options is included in utils/julia-format.jl. Note, however, that this tool is not yet optimal, as it re-indents too greedily.","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"This is a list of handy style guides that are mostly consistent with each other and this guide, and which have been used as a basis:","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"https://www.juliaopt.org/JuMP.jl/stable/style/\nhttps://github.com/jrevels/YASGuide","category":"page"},{"location":"#Trixi.jl","page":"Home","title":"Trixi.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trixi.jl is a numerical simulation framework for hyperbolic conservation laws written in Julia. A key objective for the framework is to be useful to both scientists and students. Therefore, next to having an extensible design with a fast implementation, Trixi is focused on being easy to use for new or inexperienced users, including the installation and postprocessing procedures. Its features include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hierarchical quadtree/octree grid with adaptive mesh refinement\nNative support for 2D and 3D simulations\nHigh-order accuracy in space in time\nNodal discontinuous Galerkin spectral element methods\nKinetic energy-preserving and entropy-stable split forms\nEntropy-stable shock capturing\nPositivity-preserving limiting\nExplicit low-storage Runge-Kutta time integration\nSquare/cubic domains with periodic and weakly-enforced boundary conditions\nMultiple governing equations:\nCompressible Euler equations\nMagnetohydrodynamics equations\nHyperbolic diffusion equations for elliptic problems\nScalar advection\nMulti-physics simulations\nSelf-gravitating gas dynamics\nShared-memory parallelization via multithreading\nVisualization of results with Julia-only tools (2D) or ParaView/VisIt (2D/3D)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. Trixi works with Julia v1.5.","category":"page"},{"location":"#For-users","page":"Home","title":"For users","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trixi and related postprocessing tools are registered Julia packages. Hence, you can install Trixi, Trixi2Vtk, and Trixi2Img by executing the following commands in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"Trixi\"); Pkg.add(\"Trixi2Vtk\"); Pkg.add(\"Trixi2Img\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that you can copy and paste all commands to the REPL including the leading julia> prompts - they will automatically be stripped away by Julia.","category":"page"},{"location":"#for-developers","page":"Home","title":"For developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you plan on editing Trixi itself, you have two options: installing it as a dev package or cloning it to a local folder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install Trixi as a dev package: You can install Trixi as a dev package by running\njulia> import Pkg\n\njulia> Pkg.dev(\"Trixi\")\nThis will download and install Trixi to a designated package development directory (usually .julia/dev, but you can determine the path on your system with Pkg.devdir()). As opposed to using the Pkg.add method as described above, packages installed via Pkg.dev may have their files edited locally.\nInstall Trixi in a local folder: Alternatively, you can download Trixi locally and use it from within the cloned directory:\ngit clone git@github.com:trixi-framework/Trixi.jl.git\ncd Trixi.jl\njulia --project=. -e 'import Pkg; Pkg.instantiate()' # Install Trixi's dependencies\nThe last line can also be used to update the dependencies if they have changed since you first installed Trixi.\nIf you installed Trixi this way, you always have to start Julia with the --project flag set to your local Trixi clone, e.g.,\njulia --project=.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Either way, since the postprocessing tools typically do not need to be modified, it is recommended to install them as normal packages by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"Trixi2Vtk\"); Pkg.add(\"Trixi2Img\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"in the Julia REPL.","category":"page"},{"location":"#Example:-Installing-Trixi-as-a-package","page":"Home","title":"Example: Installing Trixi as a package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"  <script id=\"asciicast-356938\"\n          src=\"https://asciinema.org/a/356938.js\"\n          async\n          data-cols=90\n          data-rows=20\n          data-speed=3></script>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please note that the playback speed is set to 3x, thus the entire installation procedure lasts around 1.5 minutes  in real time (depending on the performance of your computer and on how many dependencies had already been installed before).","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the Julia REPL, first load the package Trixi","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Trixi","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then start a simulation by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Trixi.run(default_example())","category":"page"},{"location":"","page":"Home","title":"Home","text":"To visualize the results, load the package Trixi2Img","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Trixi2Img","category":"page"},{"location":"","page":"Home","title":"Home","text":"and generate a contour plot of the results with","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> trixi2img(joinpath(\"out\", \"solution_000040.h5\"), output_directory=\"out\", grid_lines=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a file solution_000040_scalar.png in the out/ subdirectory that can be opened with any image viewer:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: \"solution_000040_scalar_resized\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"The method Trixi.run(...) expects a single string argument with the path to a Trixi parameter file. To quickly see Trixi in action, default_example() returns the path to an example parameter file with a short, two-dimensional problem setup. A list of all example parameter files packaged with Trixi can be obtained by running get_examples(). Alternatively, you can also browse the examples/ subdirectory. If you want to modify one of the parameter files to set up your own simulation, download it to your machine, edit the configuration, and pass the file path to Trixi.run(...).","category":"page"},{"location":"#Example:-Running-a-simulation-with-Trixi","page":"Home","title":"Example: Running a simulation with Trixi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"  <script id=\"asciicast-356942\"\n          src=\"https://asciinema.org/a/356942.js\"\n          async\n          data-cols=90\n          data-rows=48></script>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note on performance: Julia uses just-in-time compilation to transform its source code to native, optimized machine code at the time of execution and caches the compiled methods for further use. That means that the first execution of a Julia method is typically slow, with subsequent runs being much faster. For instance, in the example above the first execution of Trixi.run takes about 15 seconds, while subsequent runs require less than 50 milliseconds.","category":"page"},{"location":"#Performing-a-convergence-analysis","page":"Home","title":"Performing a convergence analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To automatically determine the experimental order of convergence (EOC) for a given setup, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"Trixi.convtest(\"examples/2d/parameters.toml\", 4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will run a convergence test with the parameters file examples/2d/parameters.toml, using four iterations with different initial refinement levels. The initial iteration will use the parameters file unchanged, while for each subsequent iteration the initial_refinement_level parameter is incremented by one. Finally, the measured L^2 and L^infty errors and the determined EOCs will be displayed like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[...]\nL2\nscalar\nerror     EOC\n9.14e-06  -\n5.69e-07  4.01\n3.55e-08  4.00\n2.22e-09  4.00\n\nmean      4.00\n--------------------------------------------------------------------------------\nLinf\nscalar\nerror     EOC\n6.44e-05  -\n4.11e-06  3.97\n2.58e-07  3.99\n1.62e-08  4.00\n\nmean      3.99\n--------------------------------------------------------------------------------","category":"page"},{"location":"","page":"Home","title":"Home","text":"An example with multiple variables looks like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Trixi.convtest(\"examples/2d/parameters_source_terms.toml\", 3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"[...]\nL2\nrho                 rho_v1              rho_v2              rho_e\nerror     EOC       error     EOC       error     EOC       error     EOC\n8.52e-07  -         1.24e-06  -         1.24e-06  -         4.28e-06  -\n6.49e-08  3.71      8.38e-08  3.88      8.38e-08  3.88      2.96e-07  3.85\n4.33e-09  3.91      5.39e-09  3.96      5.39e-09  3.96      1.93e-08  3.94\n\nmean      3.81      mean      3.92      mean      3.92      mean      3.90\n--------------------------------------------------------------------------------\nLinf\nrho                 rho_v1              rho_v2              rho_e\nerror     EOC       error     EOC       error     EOC       error     EOC\n8.36e-06  -         1.03e-05  -         1.03e-05  -         4.50e-05  -\n5.58e-07  3.90      6.58e-07  3.97      6.58e-07  3.97      2.92e-06  3.94\n3.77e-08  3.89      4.42e-08  3.90      4.42e-08  3.90      1.91e-07  3.93\n\nmean      3.90      mean      3.93      mean      3.93      mean      3.94\n--------------------------------------------------------------------------------","category":"page"},{"location":"#Referencing","page":"Home","title":"Referencing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use Trixi in your own research or write a paper using results obtained with the help of Trixi, please cite the following reference:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@online{schlottkelakemper2020purely,\n  title={A purely hyperbolic discontinuous {G}alerkin approach for\n         self-gravitating gas dynamics},\n  author={Schlottke-Lakemper, Michael and Winters, Andrew R and\n          Ranocha, Hendrik and Gassner, Gregor J},\n  year={2020},\n  month={08},\n  eprint={2008.10593},\n  eprinttype={arXiv},\n  eprintclass={math.NA}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, you can also refer to Trixi directly as","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{schlottkelakemper2020trixi,\n  title={{T}rixi.jl: A tree-based numerical simulation framework\n         for hyperbolic {PDE}s written in {J}ulia},\n  author={Schlottke-Lakemper, Michael and Gassner, Gregor J and\n          Ranocha, Hendrik and Winters, Andrew R},\n  year={2020},\n  month={08},\n  howpublished={\\url{https://github.com/trixi-framework/Trixi.jl}},\n  doi={10.5281/zenodo.3996439}\n}","category":"page"},{"location":"#authors-index-md","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trixi was initiated by Michael Schlottke-Lakemper and Gregor Gassner (both University of Cologne, Germany). Together with Hendrik Ranocha (KAUST, Saudi Arabia) and Andrew Winters (Linköping University, Sweden), they are the principal developers of Trixi. The full list of contributors can be found under Authors.","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trixi is licensed under the MIT license (see License). Since Trixi is an open-source project, we are very happy to accept contributions from the community. Please refer to Contributing for more details.","category":"page"},{"location":"reference-trixi2vtk/#Trixi2Vtk.jl-API","page":"Trixi2Vtk.jl","title":"Trixi2Vtk.jl API","text":"","category":"section"},{"location":"reference-trixi2vtk/","page":"Trixi2Vtk.jl","title":"Trixi2Vtk.jl","text":"CurrentModule = Trixi2Vtk","category":"page"},{"location":"reference-trixi2vtk/","page":"Trixi2Vtk.jl","title":"Trixi2Vtk.jl","text":"Modules = [Trixi2Vtk]","category":"page"},{"location":"reference-trixi2vtk/#Trixi2Vtk.trixi2vtk-Tuple{Vararg{AbstractString,N} where N}","page":"Trixi2Vtk.jl","title":"Trixi2Vtk.trixi2vtk","text":"trixi2vtk(filename::AbstractString...;\n          format=:vtu, verbose=false, hide_progress=false, pvd=nothing,\n          output_directory=\".\", nvisnodes=nothing)\n\nConvert Trixi-generated output files to VTK files (VTU or VTI).\n\nArguments\n\nfilename: One or more Trixi solution/restart/mesh files to convert to a VTK file.             Filenames support file globbing, e.g., \"solution*\" to match all files starting             with solution.\nformat: Output format for solution/restart files. Can be 'vtu' or 'vti'.\nverbose: Set to true to enable verbose output.\nhide_progress: Hide progress bar (will be hidden automatically if verbose is true).\npvd: Use this filename to store PVD file (instead of auto-detecting name). Note that        only the name will be used (directory and file extension are ignored).\noutput_directory: Output directory where generated files are stored.\nnvisnodes: Number of visualization nodes per element (default: twice the number of DG nodes).              A value of 0 (zero) uses the number of nodes in the DG elements.\n\nExamples\n\njulia> trixi2vtk(\"out/solution_000*.h5\")\n[...]\n\n\n\n\n\n","category":"method"}]
}
